%function [Date,PM1SeqLength,PM1MS1Corr,PM1MS2Corr,PM1TimeElapsed,PM1NoSequence,PM2SeqLength,PM2MS1Corr,PM2MS2Corr,PM2TimeElapsed,PM2NoSequence,GSN] = GetLastShotInfo(handles)
function [Date,PM1SeqLength,PM1MS1Corr,PM1MS2Corr,PM1TimeElapsed,PM1NoSequence,PM2SeqLength,PM2MS1Corr,PM2MS2Corr,PM2TimeElapsed,PM2NoSequence,GSN] = GetShotInfo()
filename='TwoStage_LogFile.txt';
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [DATE,PM1SEQLENGTH,PM1MS1CORR,PM1MS2CORR,PM1TIMEELAPSED,PM1NOSEQUENCE,PM2SEQLENGTH,PM2MS1CORR,PM2MS2CORR,PM2TIMEELAPSED,PM2NOSEQUENCE,GSN]
%   = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [DATE,PM1SEQLENGTH,PM1MS1CORR,PM1MS2CORR,PM1TIMEELAPSED,PM1NOSEQUENCE,PM2SEQLENGTH,PM2MS1CORR,PM2MS2CORR,PM2TIMEELAPSED,PM2NOSEQUENCE,GSN]
%   = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [Date,PM1SeqLength,PM1MS1Corr,PM1MS2Corr,PM1TimeElapsed,PM1NoSequence,PM2SeqLength,PM2MS1Corr,PM2MS2Corr,PM2TimeElapsed,PM2NoSequence,GSN] = importfile('TwoStage_LogFile.txt',2, 2);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2017/11/27 10:26:27

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[2,3,4,5,6,7,8,9,10,11]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

% Convert the contents of columns with dates to MATLAB datetimes using date
% format string.
try
    dates{1} = datetime(dataArray{1}, 'Format', 'dd-MMM-yyyy HH:mm:ss', 'InputFormat', 'dd-MMM-yyyy HH:mm:ss');
catch
    try
        % Handle dates surrounded by quotes
        dataArray{1} = cellfun(@(x) x(2:end-1), dataArray{1}, 'UniformOutput', false);
        dates{1} = datetime(dataArray{1}, 'Format', 'dd-MMM-yyyy HH:mm:ss', 'InputFormat', 'dd-MMM-yyyy HH:mm:ss');
    catch
        dates{1} = repmat(datetime([NaN NaN NaN]), size(dataArray{1}));
    end
end

anyBlankDates = cellfun(@isempty, dataArray{1});
anyInvalidDates = isnan(dates{1}.Hour) - anyBlankDates;
dates = dates(:,1);

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [2,3,4,5,6,7,8,9,10,11]);
rawCellColumns = raw(:, 12);


%% Allocate imported array to column variable names
Date = dates{:, 1};
PM1SeqLength = cell2mat(rawNumericColumns(:, 1));
PM1MS1Corr = cell2mat(rawNumericColumns(:, 2));
PM1MS2Corr = cell2mat(rawNumericColumns(:, 3));
PM1TimeElapsed = cell2mat(rawNumericColumns(:, 4));
PM1NoSequence = cell2mat(rawNumericColumns(:, 5));
PM2SeqLength = cell2mat(rawNumericColumns(:, 6));
PM2MS1Corr = cell2mat(rawNumericColumns(:, 7));
PM2MS2Corr = cell2mat(rawNumericColumns(:, 8));
PM2TimeElapsed = cell2mat(rawNumericColumns(:, 9));
PM2NoSequence = cell2mat(rawNumericColumns(:, 10));
GSN = rawCellColumns(:, 1);

% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% Date=datenum(Date);


